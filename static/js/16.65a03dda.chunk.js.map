{"version":3,"sources":["webpack:///./src/pages/Authe/index.css?f159","src/pages/Authe/index.css","src/pages/Authe/Company/SignUp/index.js"],"names":["api","content","__esModule","default","module","i","options","exports","locals","___CSS_LOADER_API_IMPORT___","push","SendButton","styled","Button","SignUp","pageHandler","embedToGetUserToken","createdCompanyValue","useUserDetail","useUserDetails","alertState","useNavigate","useAlertState","useState","company","companyName","countriesList","country","email","phoneNumber","website","onRequest","companiesList","isFromExistingCompany","state","setState","stateHandler","key","value","useEffect","a","async","SojiBaseInit","SojiBase","get","on","response","data","className","allowCreateWhileLoading","placeholder","title","onChange","cacheOptions","getNewOptionData","e","target","desc","important","filter","option","to","loading","onClick","Cookies","SOJIBase","deleteCookie","set","payload","companyEmail","companyPhoneNumber","claimCompanyId","id","post","type","claimCompany","onClose","window","location","reload","signUp"],"mappings":"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","file":"static/js/16.65a03dda.chunk.js","sourcesContent":["var api = require(\"!../../../node_modules/@expo/webpack-config/node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../node_modules/@expo/webpack-config/node_modules/css-loader/dist/cjs.js!./index.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../node_modules/@expo/webpack-config/node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \".authe_container {\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n  align-items: center;\\n  padding: 15px;\\n  flex: 1;\\n}\\n.authe_container .title {\\n  font-size: 24px;\\n  line-height: 29px;\\n}\\n.authe_container .authe_content {\\n  width: 100%;\\n  flex: 1;\\n}\\n.authe_container .authe_action_box {\\n  width: 100%;\\n  display: flex;\\n  justify-content: space-between;\\n  margin-top: 15px;\\n}\", \"\"]);\n// Exports\nmodule.exports = exports;\n","import React, { useEffect, useState } from 'react';\r\nimport { Input, Select, AutoSuggest } from '@components/libs/Forms';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Button from '@components/libs/Button';\r\nimport SojiBaseInit from '@modules/SojiBase';\r\nimport { Link } from 'react-router-dom';\r\nimport { useAlertState } from '@components/libs/Notify/useAlertState';\r\nimport Cookies from 'js-cookie';\r\nimport Preloader from '@components/preloader';\r\nimport useUserDetails from '@components/Hooks/useUserDetails';\r\nimport Structure from '../../../Structure';\r\nimport '../../index.css';\r\nimport styled from 'styled-components';\r\nimport { colors } from '@components/typo';\r\n\r\nconst SendButton = styled(Button)`\r\n    width: 60%;\r\n    height: 40px;\r\n`;\r\n\r\nexport default function SignUp({ pageHandler, embedToGetUserToken }) {\r\n    let createdCompanyValue;\r\n    const useUserDetail = useUserDetails();\r\n    const navigate = useNavigate();\r\n    const alertState = useAlertState();\r\n    const [state, setState] = useState({\r\n        company: '',\r\n        companyName: '',\r\n        countriesList: false,\r\n        country: false,\r\n        email: '',\r\n        phoneNumber: '',\r\n        website: '',\r\n        onRequest: false,\r\n        companiesList: [],\r\n        isFromExistingCompany: false,\r\n    });\r\n\r\n    const stateHandler = (key, value) => {\r\n        state[key] = value;\r\n        setState({ ...state });\r\n    };\r\n\r\n    const signUp = async () => {\r\n        if (typeof Cookies.get('SOJI_uft_token') != 'undefined') {\r\n            const SOJIBase = await SojiBaseInit;\r\n            await SOJIBase.deleteCookie();\r\n            useUserDetail.set(false);\r\n        }\r\n        const payload = {\r\n            companyName: state.companyName,\r\n            email: state.email,\r\n            phoneNumber: state.phoneNumber,\r\n            website: state.website,\r\n            country: state.country,\r\n        };\r\n        stateHandler('onRequest', true);\r\n        const SojiBase = await SojiBaseInit;\r\n        const getter = await SojiBase.post('v1/company/authe/signup', payload);\r\n        getter.on('static', (response) => {\r\n            stateHandler('onRequest', false);\r\n            const data = response.response.data;\r\n            alertState.set({\r\n                state: true,\r\n                title: 'Notification',\r\n                desc: data,\r\n                type: 'success',\r\n                onClose: () => window.location.reload()\r\n            });\r\n        });\r\n    };\r\n\r\n    const claimCompany = async () => {\r\n        stateHandler('onRequest', true);\r\n\r\n        if (typeof Cookies.get('SOJI_uft_token') != 'undefined') {\r\n            const SOJIBase = await SojiBaseInit;\r\n            await SOJIBase.deleteCookie();\r\n            useUserDetail.set(false);\r\n        }\r\n\r\n        const payload = {\r\n            companyName: state.companyName,\r\n            companyEmail: state.email,\r\n            companyPhoneNumber: state.phoneNumber,\r\n            claimCompanyId: state.company.id,\r\n        };\r\n\r\n        const SojiBase = await SojiBaseInit;\r\n        const getter = await SojiBase.post('v1/company/authe/claim_company', payload);\r\n        getter.on('static', (response) => {\r\n            stateHandler('onRequest', false);\r\n            const data = response.response.data;\r\n            alertState.set({\r\n                state: true,\r\n                title: 'Notification',\r\n                desc: data,\r\n                type: 'success',\r\n            });\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            const SojiBase = await SojiBaseInit;\r\n            const getter = await SojiBase.get('v1/utils/countries');\r\n            getter.on('static', (response) => {\r\n                stateHandler('countriesList', response.response.data);\r\n            });\r\n        })();\r\n    }, []);\r\n\r\n    const onCompanySelected = (company) => {\r\n        stateHandler('companyName', company);\r\n        if (company == createdCompanyValue) {\r\n            stateHandler('isFromExistingCompany', false);\r\n        } else {\r\n            stateHandler('isFromExistingCompany', true);\r\n        }\r\n    };\r\n\r\n    const createdCompanyValueHandler = (value) => {\r\n        createdCompanyValue = value;\r\n    };\r\n\r\n    return (\r\n        <Structure company>\r\n            {state.countriesList ? (\r\n                <div className=\"authe_container\">\r\n                    <div className=\"title\">Sign Up</div>\r\n                    <div className=\"authe_content\">\r\n                        <AutoSuggest\r\n                            allowCreateWhileLoading={false}\r\n                            placeholder=\"Company Name\"\r\n                            title=\"Company Name\"\r\n                            onChange={(value) => {\r\n                                stateHandler('company', value);\r\n                                onCompanySelected(value.companyName);\r\n                            }}\r\n                            value={state.company}\r\n                            cacheOptions={false}\r\n                            getNewOptionData={createdCompanyValueHandler}\r\n                        />\r\n\r\n                        {state.isFromExistingCompany ? (\r\n                            <>\r\n                                <Input\r\n                                    placeholder=\"Company Email\"\r\n                                    title=\"Company Email\"\r\n                                    value={state.email}\r\n                                    onChange={(e) => stateHandler('email', e.target.value)}\r\n                                    desc=\"Seperate each email address by ,\"\r\n                                />\r\n                                <Input\r\n                                    placeholder=\"Company Phone Number\"\r\n                                    title=\"Company Phone Number\"\r\n                                    value={state.phoneNumber}\r\n                                    onChange={(e) => stateHandler('phoneNumber', e.target.value)}\r\n                                    desc=\"Seperate each Phone Number by ,\"\r\n                                />\r\n                            </>\r\n                        ) : (\r\n                            <>\r\n                                <Input\r\n                                    placeholder=\"Company Email\"\r\n                                    title=\"Company Email\"\r\n                                    value={state.email}\r\n                                    onChange={(e) => stateHandler('email', e.target.value)}\r\n                                    desc=\"Seperate each email address by ,\"\r\n                                />\r\n                                <Input\r\n                                    placeholder=\"Company Phone Number\"\r\n                                    title=\"Company Phone Number\"\r\n                                    value={state.phoneNumber}\r\n                                    onChange={(e) => stateHandler('phoneNumber', e.target.value)}\r\n                                    desc=\"Seperate each Phone Number by ,\"\r\n                                />\r\n                                <Select\r\n                                    placeholder=\"Select Country\"\r\n                                    title=\"Select Country\"\r\n                                    onChange={(e) => {\r\n                                        stateHandler('country', e.value);\r\n                                    }}\r\n                                    options={state.countriesList}\r\n                                    important\r\n                                    value={state.countriesList.filter(function (option) {\r\n                                        return option.value === state.country;\r\n                                    })}\r\n                                />\r\n                                <Input\r\n                                    placeholder=\"Company Website\"\r\n                                    value={state.website}\r\n                                    title=\"Company Website\"\r\n                                    onChange={(e) => stateHandler('website', e.target.value)}\r\n                                />\r\n                            </>\r\n                        )}\r\n                    </div>\r\n                    <div className=\"authe_action_box\">\r\n                        <p>\r\n                            Have an account?\r\n                            <Link to=\"/company/login\" className=\"text_default_color text_bold cursor_pointer\">\r\n                                Sign In\r\n                            </Link>\r\n                        </p>\r\n                    </div>\r\n                    {state.isFromExistingCompany ? (\r\n                        <div className=\"button_container\">\r\n                            <SendButton\r\n                                className=\"button\"\r\n                                title=\"Claim Company\"\r\n                                loading={state.onRequest}\r\n                                onClick={() => claimCompany()}\r\n                            />\r\n                        </div>\r\n                    ) : (\r\n                        <div className=\"button_container\">\r\n                            <SendButton\r\n                                className=\"button\"\r\n                                title=\"Sign Up\"\r\n                                loading={state.onRequest}\r\n                                onClick={() => signUp()}\r\n                            />\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            ) : (\r\n                <Preloader />\r\n            )}\r\n        </Structure>\r\n    );\r\n}\r\n"],"sourceRoot":""}
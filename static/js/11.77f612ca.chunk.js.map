{"version":3,"sources":["webpack:///./src/pages/Authe/index.css?f159","src/pages/Authe/index.css","src/components/mixpanel/index.js","src/pages/Authe/Company/SignUp/index.js"],"names":["api","content","__esModule","default","module","i","options","exports","locals","___CSS_LOADER_API_IMPORT___","push","mixpanel","init","debug","ignore_dnt","SendButton","styled","Button","SignUp","pageHandler","embedToGetUserToken","createdCompanyValue","useUserDetail","useUserDetails","navigate","useNavigate","alertState","useAlertState","useState","company","companyName","countriesList","country","email","phoneNumber","website","onRequest","companiesList","isFromExistingCompany","notARobot","state","setState","stateHandler","key","value","useEffect","a","async","track","SojiBaseInit","SojiBase","get","on","response","data","companyAuthe","className","getOptionLabel","e","getOptionValue","pageHandle","allowCreateWhileLoading","placeholder","title","onChange","cacheOptions","getNewOptionData","target","desc","important","filter","option","uri","onUploadFinished","id","config","server","upload_path","sitekey","to","error","style","color","loading","onClick","Cookies","SOJIBase","deleteCookie","set","payload","companyEmail","companyPhoneNumber","claimCompanyId","post","status","type","onClose","window","location","reload","claimCompany","signUp"],"mappings":"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","file":"static/js/11.77f612ca.chunk.js","sourcesContent":["var api = require(\"!../../../node_modules/@expo/webpack-config/node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../node_modules/@expo/webpack-config/node_modules/css-loader/dist/cjs.js!./index.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../node_modules/@expo/webpack-config/node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \".authe_container {\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n  align-items: center;\\n  padding: 15px;\\n  flex: 1;\\n}\\n.authe_container .title {\\n  font-size: 24px;\\n  line-height: 29px;\\n}\\n.authe_container .authe_content {\\n  width: 100%;\\n  flex: 1;\\n}\\n.authe_container .authe_action_box {\\n  width: 100%;\\n  display: flex;\\n  justify-content: space-between;\\n  margin-top: 15px;\\n}\", \"\"]);\n// Exports\nmodule.exports = exports;\n","import mixpanel from 'mixpanel-browser';\n\nmixpanel.init('12ee3cf398f805c6b4163cc243a4b4ef', {debug: true, ignore_dnt: true});\n\nexport default mixpanel\n","import React, { useEffect, useState } from 'react';\r\nimport { Input, Select, AutoSuggest, FileUploader } from '@components/libs/Forms';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Button from '@components/libs/Button';\r\nimport SojiBaseInit, { config } from '@modules/SojiBase';\r\nimport { Link } from 'react-router-dom';\r\nimport { useAlertState } from '@components/libs/Notify/useAlertState';\r\nimport Cookies from 'js-cookie';\r\nimport Preloader from '@components/preloader';\r\nimport useUserDetails from '@components/Hooks/useUserDetails';\r\nimport Structure from '../../../Structure';\r\nimport '../../index.css';\r\nimport styled from 'styled-components';\r\nimport { colors } from '@components/typo';\r\nimport mixpanel from '@components/mixpanel';\r\nimport ReCAPTCHA from 'react-google-recaptcha';\r\n\r\nconst SendButton = styled(Button)`\r\n    width: 60%;\r\n    height: 40px;\r\n`;\r\n\r\nexport default function SignUp({ pageHandler, embedToGetUserToken }) {\r\n    let createdCompanyValue;\r\n    const useUserDetail = useUserDetails();\r\n    const navigate = useNavigate();\r\n    const alertState = useAlertState();\r\n    const [state, setState] = useState({\r\n        company: '',\r\n        companyName: '',\r\n        countriesList: false,\r\n        country: false,\r\n        email: '',\r\n        phoneNumber: '',\r\n        website: '',\r\n        onRequest: false,\r\n        companiesList: [],\r\n        isFromExistingCompany: false,\r\n        notARobot: false,\r\n    });\r\n\r\n    const stateHandler = (key, value) => {\r\n        state[key] = value;\r\n        setState({ ...state });\r\n    };\r\n\r\n    const signUp = async () => {\r\n        if (typeof Cookies.get('SOJI_uft_token') != 'undefined') {\r\n            const SOJIBase = await SojiBaseInit;\r\n            await SOJIBase.deleteCookie();\r\n            useUserDetail.set(false);\r\n        }\r\n        if (!state.notARobot) {\r\n            stateHandler('error', 'Please verify you not a robot');\r\n            return;\r\n        }\r\n        const payload = {\r\n            companyName: state.companyName,\r\n            email: state.email,\r\n            phoneNumber: state.phoneNumber,\r\n            website: state.website,\r\n            country: state.country,\r\n        };\r\n        stateHandler('onRequest', true);\r\n        const SojiBase = await SojiBaseInit;\r\n        const getter = await SojiBase.post('v1/company/authe/signup', payload);\r\n        getter.on('static', (response) => {\r\n            stateHandler('onRequest', false);\r\n            const data = response.response.data;\r\n            if (response.response.status == 201) {\r\n                alertState.set({\r\n                    state: true,\r\n                    title: 'Notification',\r\n                    desc: data,\r\n                    type: 'success',\r\n                    onClose: () => navigate('/company/awaiting-activation'),\r\n                });\r\n            } else {\r\n                alertState.set({\r\n                    state: true,\r\n                    title: 'Notification',\r\n                    desc: data,\r\n                    type: 'success',\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n    const claimCompany = async () => {\r\n        stateHandler('onRequest', true);\r\n\r\n        if (typeof Cookies.get('SOJI_uft_token') != 'undefined') {\r\n            const SOJIBase = await SojiBaseInit;\r\n            await SOJIBase.deleteCookie();\r\n            useUserDetail.set(false);\r\n        }\r\n\r\n        const payload = {\r\n            companyName: state.companyName,\r\n            companyEmail: state.email,\r\n            companyPhoneNumber: state.phoneNumber,\r\n            claimCompanyId: state.company.id,\r\n        };\r\n\r\n        const SojiBase = await SojiBaseInit;\r\n        const getter = await SojiBase.post('v1/company/authe/claim_company', payload);\r\n        getter.on('static', (response) => {\r\n            stateHandler('onRequest', false);\r\n            const data = response.response.data;\r\n            if (response.response.status == 201) {\r\n                alertState.set({\r\n                    state: true,\r\n                    title: 'Notification',\r\n                    desc: data,\r\n                    type: 'success',\r\n                    onClose: () => navigate('/company/awaiting-activation'),\r\n                });\r\n            } else {\r\n                alertState.set({\r\n                    state: true,\r\n                    title: 'Notification',\r\n                    desc: data,\r\n                    type: 'success',\r\n                    onClose: () => window.location.reload(),\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            //mixpanel\r\n            mixpanel.track('Sojiare Company Page Login', {\r\n                'Opted out of email': true,\r\n                'ip': '0',\r\n            });\r\n            const SojiBase = await SojiBaseInit;\r\n            const getter = await SojiBase.get('v1/utils/countries');\r\n            getter.on('static', (response) => {\r\n                stateHandler('countriesList', response.response.data);\r\n            });\r\n        })();\r\n    }, []);\r\n\r\n    const onCompanySelected = (company) => {\r\n        stateHandler('companyName', company);\r\n        if (company == createdCompanyValue) {\r\n            stateHandler('isFromExistingCompany', false);\r\n        } else {\r\n            stateHandler('isFromExistingCompany', true);\r\n        }\r\n    };\r\n\r\n    const createdCompanyValueHandler = (value) => {\r\n        createdCompanyValue = value;\r\n    };\r\n\r\n    const onUploadFinished = async (data) => {\r\n        const response = data[0];\r\n        stateHandler('image', response.id);\r\n        stateHandler('imagePath', config.server + response.upload_path);\r\n    };\r\n\r\n    return (\r\n        <Structure companyAuthe>\r\n            {state.countriesList ? (\r\n                <div className=\"authe_container\">\r\n                    <div className=\"title\">Signup as a Company</div>\r\n                    <div className=\"authe_content\">\r\n                        <AutoSuggest\r\n                            getOptionLabel={(e) => e.companyName}\r\n                            getOptionValue={(e) => e.pageHandle}\r\n                            allowCreateWhileLoading={false}\r\n                            placeholder=\"Company Name\"\r\n                            title=\"Company Name\"\r\n                            onChange={(value) => {\r\n                                stateHandler('company', value);\r\n                                onCompanySelected(value.companyName);\r\n                            }}\r\n                            value={state.company}\r\n                            cacheOptions={false}\r\n                            getNewOptionData={createdCompanyValueHandler}\r\n                        />\r\n\r\n                        {state.isFromExistingCompany ? (\r\n                            <>\r\n                                <Input\r\n                                    placeholder=\"Company Email\"\r\n                                    title=\"Company Email\"\r\n                                    value={state.email}\r\n                                    onChange={(e) => stateHandler('email', e.target.value)}\r\n                                    desc=\"Seperate each email address by ,\"\r\n                                />\r\n                                <Input\r\n                                    placeholder=\"Company Phone Number\"\r\n                                    title=\"Company Phone Number\"\r\n                                    value={state.phoneNumber}\r\n                                    onChange={(e) => stateHandler('phoneNumber', e.target.value)}\r\n                                    desc=\"Seperate each Phone Number by ,\"\r\n                                />\r\n                            </>\r\n                        ) : (\r\n                            <>\r\n                                <Input\r\n                                    placeholder=\"Company Email\"\r\n                                    title=\"Company Email\"\r\n                                    value={state.email}\r\n                                    onChange={(e) => stateHandler('email', e.target.value)}\r\n                                    desc=\"Seperate each email address by ,\"\r\n                                />\r\n                                <Input\r\n                                    placeholder=\"Company Phone Number\"\r\n                                    title=\"Company Phone Number\"\r\n                                    value={state.phoneNumber}\r\n                                    onChange={(e) => stateHandler('phoneNumber', e.target.value)}\r\n                                    desc=\"Seperate each Phone Number by ,\"\r\n                                />\r\n                                <Select\r\n                                    placeholder=\"Select Country\"\r\n                                    title=\"Select Country\"\r\n                                    onChange={(e) => {\r\n                                        stateHandler('country', e.value);\r\n                                    }}\r\n                                    options={state.countriesList}\r\n                                    important\r\n                                    value={state.countriesList.filter(function (option) {\r\n                                        return option.value === state.country;\r\n                                    })}\r\n                                />\r\n                                <Input\r\n                                    placeholder=\"Company Website\"\r\n                                    value={state.website}\r\n                                    title=\"Company Website\"\r\n                                    onChange={(e) => stateHandler('website', e.target.value)}\r\n                                />\r\n                            </>\r\n                        )}\r\n                    </div>\r\n\r\n                    <FileUploader title=\"Upload Documents\" uri=\"v1/uploads\" onUploadFinished={onUploadFinished} />\r\n\r\n                    <ReCAPTCHA\r\n                        sitekey=\"6Lc63KYfAAAAAB2od6DQhsYmix4yXz1vX4qQOH_j\"\r\n                        onChange={(e) => stateHandler('notARobot', e)}\r\n                    />\r\n\r\n                    <div className=\"authe_action_box\">\r\n                        <p>\r\n                            Have an account?\r\n                            <Link to=\"/company/login\" className=\"text_default_color text_bold cursor_pointer\">\r\n                                Sign In\r\n                            </Link>\r\n                        </p>\r\n                    </div>\r\n\r\n                    {state.error ? <p style={{ color: 'red' }}>{state.error}</p> : null}\r\n\r\n                    {state.isFromExistingCompany ? (\r\n                        <div className=\"button_container\">\r\n                            <SendButton\r\n                                className=\"button\"\r\n                                title=\"Claim Company\"\r\n                                loading={state.onRequest}\r\n                                onClick={() => claimCompany()}\r\n                            />\r\n                        </div>\r\n                    ) : (\r\n                        <div className=\"button_container\">\r\n                            <SendButton\r\n                                className=\"button\"\r\n                                title=\"Sign Up\"\r\n                                loading={state.onRequest}\r\n                                onClick={() => signUp()}\r\n                            />\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            ) : (\r\n                <Preloader />\r\n            )}\r\n        </Structure>\r\n    );\r\n}\r\n"],"sourceRoot":""}